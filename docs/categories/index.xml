
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Categories on Hemashushu&#39;s Homepage</title>
   <link>https://hemashushu.github.io/categories/</link>
   <description>Recent content in Categories on Hemashushu&#39;s Homepage</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <copyright>Copyright &amp;copy; 2022 - Hippospark</copyright>
   <lastBuildDate>Fri, 06 Jan 2023 00:00:00 +0000</lastBuildDate>
   
       <atom:link href="https://hemashushu.github.io/categories/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>RISC-V Development using QEMU - Part 1 Build a minimal Linux System</title>
       <link>https://hemashushu.github.io/posts/2023-01-06-risc-v-development-using-qemu-part-1-minimal-linux/</link>
       <pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate>
       
       <guid>https://hemashushu.github.io/posts/2023-01-06-risc-v-development-using-qemu-part-1-minimal-linux/</guid>
       <description>&lt;p&gt;This series articles will guide you setting up a RISC-V development environment using QEMU. The series includes four parts:&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;../2023-01-06-risc-v-development-using-qemu-part-1-minimal-linux/&#34;&gt;Part 1&lt;/a&gt;. Building a minimal RISC-V Linux system with only Linux kernel and BusyBox, and runs on the QEMU emulator.Part 2. Building a base RISC-V Linux system with the ability of doing RISC-V assembly development and debug using Buildroot.Part 3. Setting up a complete Debian RISC-V Linux system in QEMU, and do C language development and debug with GCC toolchains.Part 4. Remote debugging with the GDB, and setup remote text editing and debugging by VSCode.&lt;/p&gt;&lt;hr&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#-why-not-use-real-risc-v-hardware&#34;&gt;Why not use real RISC-V hardware?&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#-create-the-project-folder&#34;&gt;Create the project folder&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#-create-risc-v-linux-hello-world-program&#34;&gt;Create RISC-V Linux &amp;ldquo;Hello World!&amp;rdquo; program&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#-build-the-linux-system&#34;&gt;Build the Linux system&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#-compile-linux-kernel&#34;&gt;Compile Linux kernel&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#-compile-busybox&#34;&gt;Compile BusyBox&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#-make-the-image-file&#34;&gt;Make the image file&lt;/a&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#-make-the-file-system&#34;&gt;Make the file system&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#-boot-the-system&#34;&gt;Boot the system&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#-run-the-hello-world-program&#34;&gt;Run the &amp;ldquo;Hello World!&amp;rdquo; program&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#-conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;!-- raw HTML omitted --&gt;&lt;h2 id=&#34;why-not-use-real-risc-v-hardware&#34;&gt;Why not use real RISC-V hardware?&lt;/h2&gt;&lt;p&gt;The RISC-V ISA has become popular in recent years due to its ease of learning and implementation, and the RISC-V toolchains are now quite mature. However, high-performance, stable and affordable RISC-V chips are still missing as of 2023.&lt;/p&gt;&lt;p&gt;Moreover, writing and debugging programs in an emulator is far more convenient than on real hardware. This approach can save money, eliminate the need for connecting wires, and avoid the hassle of copying or synchronizing program files. You can perform all sorts of tasks on just one machine.&lt;/p&gt;&lt;h2 id=&#34;create-the-project-folder&#34;&gt;Create the project folder&lt;/h2&gt;&lt;p&gt;QEMU is a software that emulates all the hardware of a complete computer system, including the CPU, memory, storage drives and network interfaces. This emulation is commonly known as a &amp;ldquo;virtual computer&amp;rdquo; or &amp;ldquo;virtual machine&amp;rdquo;.&lt;/p&gt;&lt;p&gt;The storage device is usually implemented using a file called &amp;ldquo;image file&amp;rdquo;, which means that the hard disk drive you see within the virtual machine is actually an ordinary file located on the &lt;em&gt;host machine&lt;/em&gt; (the machine running QEMU). Operations such as partitioning, formatting, reading and writing to the hard disk drive within the virtual machine take place inside the image file.&lt;/p&gt;&lt;p&gt;The hardware configuation of the virtual machine, such as the type of CPU, number of cores, memory capacity etc. is specified through QEMU command line parameters. As a result, the command to start QEMU can be quite long. It&amp;rsquo;s a good practice to create a directory for each virtual machine, which contains an image file and a Shell script to start QEMU.&lt;/p&gt;&lt;p&gt;To get started, create a directory in your home directory and name it something like &amp;ldquo;riscv64-minimal-linux&amp;rdquo;, this is where you will store all the files created in this chapter.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir ~/riscv64-minimal-linux&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd ~/riscv64-minimal-linux&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;It is not possible to create a RISC-V virtual machine using virtualaztion software such as VirtualBox and VMWare. This is because these types of software are only capable of creating virtual machine with the same architecture CPU as the host machine. For example, on an &lt;em&gt;x86_64&lt;/em&gt; system, you can only create an &lt;em&gt;x86_64&lt;/em&gt; virtual machine. However, since the computing ability of virtual machines is provided by the physical CPU of the host machine, their performance is typically much higher than that of QEMU.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;create-risc-v-linux-hello-world-program&#34;&gt;Create RISC-V Linux &amp;ldquo;Hello World!&amp;rdquo; program&lt;/h2&gt;&lt;p&gt;Out objective is to create a RISC-V Linux system. To validate that the target system is functional, the most straightforward approach is to write a RISC-V Linux &amp;ldquo;Hello World!&amp;rdquo; program and try to execute it on the target system.&lt;/p&gt;&lt;p&gt;To begin, create a &lt;code&gt;main.c&lt;/code&gt; file in the &lt;code&gt;~/riscv64-minimal-linux&lt;/code&gt; directory and input the following code:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;){&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compile the code using RISC-V GCC:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ riscv64-linux-gnu-gcc -g -Wall -static -o main.elf main.c&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that you may need to install the RISC-V GCC toolchains if they are not already installed on your system. For example, on Archlinux, the required packages are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;riscv64-linux-gnu-gcc&lt;/li&gt;&lt;li&gt;riscv64-linux-gnu-binutils&lt;/li&gt;&lt;li&gt;riscv64-linux-gnu-gdb&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;On Debian/Ubuntu, the packages are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;gcc-riscv64-linux-gnu&lt;/li&gt;&lt;li&gt;binutils-riscv64-linux-gnu&lt;/li&gt;&lt;li&gt;gdb-multiarch&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After compiling, we obtain the output file &lt;code&gt;main.elf&lt;/code&gt;, however it is certain that the program will not run properly. The program&amp;rsquo;s instructions are in RISC-V, while the CPU of our host machine is &lt;em&gt;x86_64&lt;/em&gt; or &lt;em&gt;ARM&lt;/em&gt;, which cannot understand the meaning of RISC-V instructions.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The compilation parameter &lt;code&gt;-static&lt;/code&gt; instructs the compiler to generate an executable program with static linking, it simplifies our example.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;build-the-linux-system&#34;&gt;Build the Linux system&lt;/h2&gt;&lt;p&gt;Building a runnable Linux system is actually far easier than you may think. In fact it only requires two softwares: the Linux kernel and Busybox.&lt;/p&gt;&lt;p&gt;The Linux kernel is responsible for driving and initializing hardware componenets, as well as creating an environment for running applications. On the other hand, BusyBox privodes a user friendly interactive interface a.k.a the Shell.&lt;/p&gt;&lt;h3 id=&#34;compile-linux-kernel&#34;&gt;Compile Linux kernel&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;Download the &lt;a href=&#34;https://github.com/torvalds/linux/tags&#34;&gt;Linux kernel source code tarball&lt;/a&gt; to the project folder, it&amp;rsquo;s not recommended that cloning the source code Git repository, as it is very large, takes a long time to download and requires a significant amount of storage space.&lt;/li&gt;&lt;/ol&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://github.com/torvalds/linux/archive/refs/tags/v6.2.tar.gz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the tarball is downloaded, extract it to obtain a folder named &lt;code&gt;linux-6.2&lt;/code&gt;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar xf v6.2.tar.gz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;Compiling with default configuration&lt;/li&gt;&lt;/ol&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd linux-6.2&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ARCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;riscv CROSS_COMPILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;riscv64-linux-gnu- make defconfig&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ARCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;riscv CROSS_COMPILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;riscv64-linux-gnu- make -j &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;nproc&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Take a break and step out for a cup of coffee. When you return, you should find a file named &lt;code&gt;arch/riscv/boot/Image&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;To examine this file, use the &lt;code&gt;file&lt;/code&gt; command:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ file arch/riscv/boot/Image&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output should indicate that file is a &amp;ldquo;PE32+ executable (EFI application)&amp;rdquo;&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./arch/riscv/boot/Image: PE32+ executable (EFI application) RISC-V 64-bit (stripped to external PDB), for MS Windows, 2 sections&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;compile-busybox&#34;&gt;Compile BusyBox&lt;/h3&gt;&lt;p&gt;Navigate back to the &lt;code&gt;~/riscv64-minimal-linux&lt;/code&gt; folder, download the &lt;a href=&#34;https://busybox.net/downloads/busybox-1.36.0.tar.bz2&#34;&gt;BusyBox tarball&lt;/a&gt;, extract the tarball and configure it using the default settings.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd ..&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://busybox.net/downloads/busybox-1.36.0.tar.bz2&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar xf busybox-1.36.0.tar.bz2&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd busybox-1.36.0&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ CROSS_COMPILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;riscv64-linux-gnu- make defconfig&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before proceeding with the compilation process, enter the &lt;code&gt;menuconfig&lt;/code&gt; and make a slight modification.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make menuconfig&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check the &amp;ldquo;Settings -&amp;gt; Build Options -&amp;gt; Build static binary (no shared libs)&amp;rdquo; option. Then select &amp;ldquo;Exit&amp;rdquo; and confirm &amp;ldquo;Yes&amp;rdquo; when prompted with &amp;ldquo;Do you wish to save your new configuration&amp;rdquo;.&lt;/p&gt;&lt;p&gt;Once you have completed this step, you can begin the compilation process:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ CROSS_COMPILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;riscv64-linux-gnu- make -j &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;nproc&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We now have the output file &lt;code&gt;./busybox&lt;/code&gt;, use the &lt;code&gt;file&lt;/code&gt; command to check and confirm that it is a RISC-V executable file with static linking.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ file busybox&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The expected output should resemble something like:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;busybox: ELF 64-bit LSB executable, UCB RISC-V, RVC, double-float ABI, version 1 (SYSV), statically linked, BuildID[sha1]=04d2e9ad32458855c1861202cc4f7b53dea75374, for GNU/Linux 4.15.0, stripped&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;make-the-image-file&#34;&gt;Make the image file&lt;/h2&gt;&lt;p&gt;Navigate back to the &lt;code&gt;~/riscv64-minimal-linux&lt;/code&gt; folder, create a new folder named &lt;code&gt;output&lt;/code&gt;. This folder will be used to store files that can be deleted during system rebuilds, such as the image file:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd ..&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir build&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd build&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, create an empty file &lt;code&gt;vda.img&lt;/code&gt; with a capacity of 128MB and format it as &lt;code&gt;ext2&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dd &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/zero of&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;vda.img bs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1M count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkfs.ext2 -F vda.img&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;make-the-file-system&#34;&gt;Make the file system&lt;/h3&gt;&lt;p&gt;Since the image file currently only contains one partition, which is empty, we can access it by mounting it. Once mounted, create the common Linux file system folder structure.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir mnt&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo mount -o loop vda.img mnt&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd mnt&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo mkdir -p bin etc dev lib proc sbin tmp usr usr/bin usr/lib usr/sbin opt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, copy the BusyBox program file into the &lt;code&gt;bin&lt;/code&gt; folder and create essential symbolic links.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd bin&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo cp ../../../busybox-1.36.0/busybox .&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo ln -s busybox sh&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd ../sbin&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo ln -s ../bin/busybox init&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Additionally, copy the &amp;ldquo;Hello World!&amp;rdquo; profile file into &lt;code&gt;opt&lt;/code&gt; folder:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd ../opt&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo cp ../../../main.elf .&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To ensure that the file system has been created correctly, use the &lt;code&gt;tree&lt;/code&gt; command.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd ..&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo tree&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The expected output should resemble the following:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── bin&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── busybox&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── sh -&amp;gt; busybox&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── dev&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── etc&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── lib&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── lost+found&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── opt&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── main.elf&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── proc&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── sbin&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── init -&amp;gt; ../bin/busybox&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── tmp&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── usr&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── bin&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── lib&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── sbin&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;14 directories, 4 files&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, exit the &lt;code&gt;mnt&lt;/code&gt; folder and unmount the image file.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd ..&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo umount mnt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You now have an image file &lt;code&gt;vda.img&lt;/code&gt; which contains a minimal bootable Linux file system.&lt;/p&gt;&lt;h2 id=&#34;boot-the-system&#34;&gt;Boot the system&lt;/h2&gt;&lt;p&gt;To begin, install QEMU, On Arch Linux, the packaged is called &lt;code&gt;qemu-system-riscv&lt;/code&gt;, on Debian/Ubuntu it&amp;rsquo;s simply called &lt;code&gt;qemu-system&lt;/code&gt;. Once you&amp;rsquo;ve installed QEMU, navigate back to the &lt;code&gt;~/riscv64-minimal-linux&lt;/code&gt; folder again and run the following command:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ qemu-system-riscv64 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;     -machine virt &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;     -m 1G &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;     -kernel ./linux-6.2/arch/riscv/boot/Image &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;     -append &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;root=/dev/vda rw console=ttyS0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;     -drive file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;build/vda.img,format&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;raw,id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hd0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;     -device virtio-blk-device,drive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hd0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;     -nographic&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are several parameters in this command, let&amp;rsquo;s go through them line by line:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;-machine virt&lt;/code&gt; QEMU can emulate many different types of read hardware platforms. A machine is a combination of a specified processor and some peripherals. The &lt;code&gt;virt&lt;/code&gt; machine is a specical one that doesn&amp;rsquo;t correspond to any real hardware. It&amp;rsquo;s an idealized processor for a specified architecture combined with some devices.&lt;/li&gt;&lt;li&gt;&lt;code&gt;-m 1G&lt;/code&gt;: This specifies the memory capacity.&lt;/li&gt;&lt;li&gt;&lt;code&gt;-kernel ./linux-6.2/arch/riscv/boot/Image&lt;/code&gt;: This specifies the kernel file. Just like a real machine, the QEMU boot process also contains several stages: &amp;ldquo;bios -&amp;gt; kernel -&amp;gt; initramfs -&amp;gt; userspace init&amp;rdquo;. When you omit the &lt;code&gt;-bios&lt;/code&gt; parameter, the default RISC-V QEMU BIOS firmware called &lt;code&gt; OpenSBI&lt;/code&gt; will be loaded automatically.&lt;/li&gt;&lt;li&gt;&lt;code&gt;-append &amp;quot;root=/dev/vda rw console=ttyS0&amp;quot;&lt;/code&gt;: This appends parameters to the kernel.&lt;/li&gt;&lt;li&gt;&lt;code&gt;-drive file=build/vda.img,format=raw,id=hd0&lt;/code&gt; and &lt;code&gt;-device virtio-blk-device,drive=hd0&lt;/code&gt;: These specify the block device, which can be considered as the hard disk drive or SSD in real life.&lt;/li&gt;&lt;li&gt;&lt;code&gt;-nographic&lt;/code&gt;: This indicates that this machine has no graphic interface hardware (also called a graphic card), so all text messages generated by the software in this machine will be fed back to user through the &lt;em&gt;Serial port&lt;/em&gt;. Of course, the &lt;em&gt;Serial port&lt;/em&gt; is also virtual, it redirects the text message to the Terminal running the QEMU program.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After executing the command, a lot of text will scroll up until an error message appears:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;can&amp;#39;t run &amp;#39;/etc/init.d/rcS&amp;#39;: No such file or directory&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Please press Enter to activate this console.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This error message appears because the system isn&amp;rsquo;t fully installed yet. Press the &lt;code&gt;Enter&lt;/code&gt; key and then run the following commands to finish the installation:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# /bin/busybox --install -s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# mkdir /etc/init.d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# touch /etc/init.d/rcS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# echo &amp;#34;#!/bin/sh&amp;#34; &amp;gt;&amp;gt; /etc/init.d/rcS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# echo &amp;#34;/bin/mount -t proc proc /proc&amp;#34; &amp;gt;&amp;gt; /etc/init.d/rcS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# chmod +x /etc/init.d/rcS&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that this step only needs to be done once. The Linux system is now ready, let&amp;rsquo;s do some checking:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# uname -a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Linux &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 6.2.0 &lt;span style=&#34;color:#75715e&#34;&gt;#1 SMP Tue Jan 4 02:10:41 CST 2023 riscv64 GNU/Linux&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# free -h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              total        used        free      shared  buff/cache   available&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Mem:         970.5M       10.6M      957.1M           &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;        2.7M      952.6M&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# mount -t proc proc /proc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat /proc/cpuinfo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;processor       : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hart            : &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;isa             : rv64imafdch_sstc_zihintpause&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mmu             : sv57&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mvendorid       : 0x0&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;marchid         : 0x70200&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mimpid          : 0x70200&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# df -h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Filesystem                Size      Used Available Use% Mounted on&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/dev/root               118.5M      2.3M    109.7M   2% /&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devtmpfs                484.2M         &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    484.2M   0% /dev&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;run-the-hello-world-program&#34;&gt;Run the &amp;ldquo;Hello World!&amp;rdquo; program&lt;/h2&gt;&lt;p&gt;Try running the &amp;ldquo;Hello World!&amp;rdquo; program we made:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/opt/main.elf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If there are no exceptions, a line of text that reads &amp;ldquo;Hello World!&amp;rdquo; will be displayed. This indicates that we&amp;rsquo;ve successfully created a minimal RISC-V Linux system. Finally, execute the &lt;code&gt;poweroff&lt;/code&gt; command to turn off the virtual machine.&lt;/p&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;In this part, we&amp;rsquo;ve created a minimal Linux system with a base shell, and it can properly run a static linking user program. However, you&amp;rsquo;ll notice that this system lacks many tools that we use daily, such as &lt;code&gt;SSH&lt;/code&gt;, &lt;code&gt;Vim&lt;/code&gt; and &lt;code&gt;wget&lt;/code&gt; etc. In the next part, we&amp;rsquo;ll build a base Linux system with common tools and the capability of doing RISC-V assembly development and debugging.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>S01C02 Write a Hello World program that can run alone without an OS</title>
       <link>https://hemashushu.github.io/posts/2022-11-06-s01c02-write-a-program-run-alone-without-os/</link>
       <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
       
       <guid>https://hemashushu.github.io/posts/2022-11-06-s01c02-write-a-program-run-alone-without-os/</guid>
       <description>&lt;p&gt;&lt;a href=&#34;https://hemashushu.github.io/zh/posts/2022-11-06-s01c02-write-a-program-run-alone-without-os&#34;&gt;read first :: /zh/posts/2022-11-06-s01c02-write-a-program-run-alone-without-os&lt;/a&gt;&lt;/p&gt;&lt;div&gt;    &lt;img src=&#34;https://hemashushu.github.io/images/subscribe-and-donate.en.png&#34; class=&#34;block-image image-480px&#34;/&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>S01C01 What is cross-compilation? Let&#39;s cross-compile and run our first program</title>
       <link>https://hemashushu.github.io/posts/2022-11-05-s01c01-cross-compile-and-run-the-first-program/</link>
       <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
       
       <guid>https://hemashushu.github.io/posts/2022-11-05-s01c01-cross-compile-and-run-the-first-program/</guid>
       <description>&lt;p&gt;&lt;a href=&#34;https://hemashushu.github.io/zh/posts/2022-11-05-s01c01-cross-compile-and-run-the-first-program&#34;&gt;read first :: /zh/posts/2022-11-05-s01c01-cross-compile-and-run-the-first-program&lt;/a&gt;&lt;/p&gt;&lt;div&gt;    &lt;img src=&#34;https://hemashushu.github.io/images/subscribe-and-donate.en.png&#34; class=&#34;block-image image-480px&#34;/&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>Making your own tools and building modern computer system from scratch, step by step</title>
       <link>https://hemashushu.github.io/posts/2022-10-31-building-a-modern-computer-system-from-scratch-step-by-step/</link>
       <pubDate>Mon, 31 Oct 2022 14:34:52 +0800</pubDate>
       
       <guid>https://hemashushu.github.io/posts/2022-10-31-building-a-modern-computer-system-from-scratch-step-by-step/</guid>
       <description>&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;&lt;p&gt;RISC-V has been a popular computer instruction set for the last few years, and I&amp;rsquo;m sure many of you have already tried to compile a RISC-V version Linux kernel, or followed a tutorial to write a toy operating system, create a toy programming language, or even write a toy CPU in HDL (hardware description language).&lt;/p&gt;&lt;p&gt;At the beginning you must have been excited, like a hero starting a new adventure in an Isekai (&lt;em&gt;異世界&lt;/em&gt;, otherworld). But when you get to the second chapter of the tutorial, you may start to feel confused and finally have to give up. You may be wondering: &amp;ldquo;I&amp;rsquo;ve been writing programs for years and solving all kinds of algorithm problems easily. Why don&amp;rsquo;t I understand these tutorials?&amp;rdquo;&lt;/p&gt;&lt;p&gt;Obviously this is because of the lack of understanding of the &lt;em&gt;system technology&lt;/em&gt;. You may disagree: &amp;ldquo;Well, system technology, I learned it long ago in my basic computer course and passed the exam! &amp;ldquo;. Yes, there are courses such as &lt;em&gt;Computer Organization and Design&lt;/em&gt;, &lt;em&gt;Compilers Principles&lt;/em&gt;, &lt;em&gt;Operating Systems&lt;/em&gt; etc., and of course they are studied in several semesters. However, it is a mistake to study these subjects separately, because the system technologies of computers are intertwined.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;images/path.en.png&#34; alt=&#34;path&#34;&gt;&lt;em&gt;The progressive learning path&lt;/em&gt;&lt;/p&gt;&lt;p&gt;A computer system consists of three basic parts: &lt;em&gt;programming language&lt;/em&gt;, &lt;em&gt;processor&lt;/em&gt;, and &lt;em&gt;operating system&lt;/em&gt;. If viewed from far away, the processor and the operating system are the same thing, they build together one of the most complex machines in history &amp;ndash; computers. The processor implements the constant logical and operations, the operating system is an extension of the processor and implements the parts that need to be changed, and the language is used to express, encapsulate and abstract the functions of the machine, making communication between the machine and humans possible. It can be seen that they are &amp;ldquo;the different aspects of the same purpose &amp;ndash; to let machines solve problems&amp;rdquo;. Learning them separately is hard to understand the connections of them. Consider thinking of each subject as a pillar. The correct learning path is to stepping upward in a spiral around these pillars, instead of climbing one pillar, then sliding down and climbing another.&lt;/p&gt;&lt;p&gt;In addition, there are also problems with the learning way, as computer system technologies are mostly the result of engineers&amp;rsquo; continuous problem solving. In other words, the theory is not the main thing, these techniques are the &lt;em&gt;best practices&lt;/em&gt; derived through trial and error. Therefore, a better way to learn is to start with exploring and practice, and then summarize by trial and error, rather than learning a lot of principles, doing a lot of exercises.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;images/way.en.png&#34; alt=&#34;way&#34;&gt;&lt;/p&gt;&lt;p&gt;In general, although you have almost all studied subjects related to computer systems, you have not really mastered these techniques because they are so far from how systems are built. Try designing a minimal instruction set and drawing the data path of a microarchitecture by hand without the help of the Internet, or writing a cold-boot bootloader for a target architecture, or writing a simple syntax parser from scratch without any libraries, and you will find it very difficult.&lt;/p&gt;&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;&lt;p&gt;We have learned a lot of computer system knowledge in our normal work and study, only they are loose and incomplete in our mind, I want to connect these knowledge through a series of articles, so that you can master it. There are many features in this series:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;No more &amp;ldquo;talk about the principle first, then do some small projects&amp;rdquo;, but start from exploration and practice, and then derive the principle in the process of practice. And unlike many hands-on tutorials, this series not only talks about &amp;ldquo;how to do&amp;rdquo;, but also explains &amp;ldquo;why&amp;rdquo; for each step. Many hands-on tutorials tend to ignore the second point, they generally list each instruction and input parameters, you must follow the instructions carefully in order to finally succeed. Follow these tutorials although you can also make &amp;ldquo;works&amp;rdquo;, but the principle of which is certainly very vague. And these operating guidelines are very dependent on the environment and tools, often because of changes in the hardware and software environment or updates to the version of the tool, resulting in some of these steps have subtle changes, inconsistent with the tutorial, and in the end can not be successful.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;No more learning by subject. The entire series is split into small stages based on the building process of the system. Each stage will cover multiple subjects at the same time, but each subject will not be covered in depth. You will complete one stage before moving on to the next.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Build from scratch without any specified IDE, SDK or library.&lt;/strong&gt; Only a few generic open source compilers and tools is need, and later you will use your own tools. Because even the tools are built by us, you can thoroughly figure out every detail.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Does not rely on any specified software and hardware, using only a few general open source software and a few of the most widely used and low-cost hardware modules, that can be completed to the last chapter. While many professional system technology tutorials or training require a variety of expensive software and hardware, this series costs less than a hundred dollars in total (of course, the series is free and there will be no promotional links in the articles). The most important thing is that this series is not designed to make you an operator of some particular software or hardware, but to let you create your own tools and build the system.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;It is not a walk-through, but an in-depth and complete practice of computer systems. After completing this series, you will have a clear understanding of the system and can be free from all the trendy &amp;ldquo;knowledge&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This series will use the RISC-V instruction set as the target architecture for learning and implementation, the reasons for choosing RISC-V are.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;It&amp;rsquo;s relatively a simple instruction set, which makes it possible to implement your own &amp;ldquo;minimal working&amp;rdquo; compiler and processor.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;There are a large number of relevant open source tools and documentation. Using tools to check and verify that your &amp;ldquo;work&amp;rdquo; is correct, which is important for both learning and implementing.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Finally, if you make a product, you don&amp;rsquo;t need to worry about the licensing issues.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&lt;p&gt;The knowledge of computer systems is very large, it is the accumulation of thousands of the world&amp;rsquo;s best engineers over the decades, both the width and depth of knowledge are almost close to the limits of the human brain. It can even be said that it is the work of a group of people who are &amp;ldquo;far beyond our current era&amp;rdquo;. &lt;em&gt;Hemashushu&lt;/em&gt; certainly know that it is impossible to complete through a few articles. So I&amp;rsquo;m going to write four series, each series contains several parts, each part contains several of chapters, a total of about a hundred long articles 😅.&lt;/p&gt;&lt;p&gt;The main content of this series can be described in one sentence: &lt;strong&gt;Learning existing tools and systems, making your own tools, building a new system&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;images/content.en.png&#34; alt=&#34;content&#34;&gt;&lt;/p&gt;&lt;p&gt;The topic is very large, but you don&amp;rsquo;t have to worry about it is too difficult to achieve. Because in each part you will only get to the level that just works. What&amp;rsquo;s more, each small part of the system technology is surprisingly easy to learn if you take it out separately. So just follow step by step and you won&amp;rsquo;t get stuck in the process.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Sometimes it&amp;rsquo;s not that the technology itself is really hard, it&amp;rsquo;s that you encounter bad textbooks or don&amp;rsquo;t meet good teacher. I think that well-written, classic textbooks though rare, but are always there and easily available, just often overshadowed by huge amounts of poor quality information. It is important to choose the right textbook.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;But I also balance &amp;ldquo;simplicity&amp;rdquo; and &amp;ldquo;practicality&amp;rdquo;, so that each &amp;ldquo;small project&amp;rdquo; has its own value. Modern mainstream computer systems have heavy historical burden, for example, GCC is more than thirty years old, as well as the Linux kernel has been developed for thirty years, which makes it very difficult for the newcomer to read, understand, modify and expand, and many new ideas cannot be integrated. Our system, on the other hand, because it starts from scratch and has no burden at all, will be relatively simple and easy to implement, and some problems can be solved from the root, new ideas (which are not actually new, just because few people know about them) can be integrated without any worries. Some features:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A language that can both be used for hardware, low-level, back-end and front-end development.&lt;/li&gt;&lt;li&gt;An assembly language that is human-readable.&lt;/li&gt;&lt;li&gt;A functional linker scripting language.&lt;/li&gt;&lt;li&gt;A microkernel system in which drivers can be develop, debug, install and distribute as easy as general applications.&lt;/li&gt;&lt;li&gt;A system that never needs to be shut down and reboot, with a rollbackable update mechanism.&lt;/li&gt;&lt;li&gt;A security model based on capability rather than &lt;em&gt;user and group&lt;/em&gt;.&lt;/li&gt;&lt;li&gt;A &lt;em&gt;Shell&lt;/em&gt; with structured data.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are more features that will be listed in specific chapters, but of course the main feature is that &lt;strong&gt;you will make and use your own tools&lt;/strong&gt;. Even if you can see other books or articles like &amp;ldquo;Building System from Scratch&amp;rdquo;, this series will still be a refreshing experience for you 😁.&lt;/p&gt;&lt;h2 id=&#34;like-share-donate&#34;&gt;Like, Share, Donate&lt;/h2&gt;&lt;p&gt;Although I have completed most of the projects in this series, I find it quite challenging to explain them. For example, how to organize the huge and intersecting contents, how to select the practical topics, how to make the transition between chapters, how to ensure the correctness of the contents, how to make it easier for the readers to read, and so on.&lt;/p&gt;&lt;p&gt;The first 8 articles in the first series took more than four months to complete, after repeated writing and revising. I don&amp;rsquo;t know how many years it will take to finish the last chapter. On the other side, although computer system technology holds the importance of technology inheritance and innovation, and holds the basis of modern industry, but it is &amp;ldquo;realistically&amp;rdquo; almost useless (💰) for individuals, because almost all companies are engaged in application-level development, and the system technology is too far away from a typical developer.&lt;/p&gt;&lt;p&gt;Although I try hard to write every article, it is obvious that only a few people will read it, and only a very few of them will be interested. So, if you happen to read this series of articles and find it helpful, please donate to me without hesitation! Your donation of a cup of coffee is my motivation to write the next article. 😄&lt;/p&gt;&lt;div&gt;    &lt;img src=&#34;https://hemashushu.github.io/images/subscribe-and-donate.en.png&#34; class=&#34;block-image image-480px&#34;/&gt;&lt;/div&gt;&lt;p&gt;Finally, while systems technology is not realistically useful, it can be a good way to satisfy your &amp;ldquo;curiosity, exploration and creation&amp;rdquo;. What could be cooler than &amp;ldquo;conquering the most complex machine in the history of mankind, alone and with bare hands&amp;rdquo;? When you finish the last chapter, I believe you will find a different world. Click on the title of the table of contents below to start your journey to the Isekai!&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; This list will be continuously updated&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;Series 1: Dive into RISC-V system step by step&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Part I: Understanding the usage of compiler, linker, debugger and some common binary tools, understanding the organization of program, building minimal freestanding (also called &lt;em&gt;bare metal programs&lt;/em&gt;) executable programs.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;../2022-11-05-s01c01-cross-compile-and-run-the-first-program&#34;&gt;S01C01 What is cross-compilation? Let&amp;rsquo;s cross-compile and run our first program&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;../2022-11-06-s01c02-write-a-program-run-alone-without-os&#34;&gt;S01C02 Write a Hello World program that can run alone without an OS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;../2022-11-07-s01c03-uncovering-the-elf-executable-file-making-a-minimal-hello-world-program&#34;&gt;S01C03 Uncovering the ELF executable file, making a minimal Hello World program only 70 bytes&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part II: A brief look at the principles of interaction between software and hardware through microcontroller (MCU). Writing bare-metal program (firmware) without SDK or HAL (hardware abstraction library), directly reading and writing registers, controlling the electrical signal of input and output pin (GPIO), implementing serial communications.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part III: Understanding the principles of program loading, dynamic linking in modern systems, understanding the function call conventions of RISC-V and the basic instructions, writing simple programs in assembly language.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part IV: Design an assembly language with a target architecture of RISC-V, implement its assembler and syntax parser.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part V: Designing a functional linker script language and implementing a script interpreter.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Series 2: Implementing a modern language and compiler step by step&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Part I: Designing an IR (intermediate language) and implementing a code generator from IR to assembly language.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part II: Designing a modern statically typed language, implementing a code generator from high-level language to IR, now you have a &lt;em&gt;simple but complete compilation system&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part III: Implement the &lt;a href=&#34;https://webassembly.org/&#34;&gt;WASM&lt;/a&gt; virtual machine (VM) and then implement the code generator for the IR to WASM. With the WASM VM you can get a basic idea of how a processor works, while having the WASM code generator means that the language can run in a browser.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part IV: Implementing the IR to the &lt;a href=&#34;https://llvm.org/docs/LangRef.html&#34;&gt;LLVM IR&lt;/a&gt; code generator, which allows the language to generate programs for &lt;code&gt;x86&lt;/code&gt; and &lt;code&gt;arm&lt;/code&gt; target architectures.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src=&#34;images/compilation-system.png&#34; alt=&#34;compilation system&#34;&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Part V: Implementing the project construction tool and package manager, which is a necessary part of any modern language.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part VI: Rewriting the compiler in the language to achieve &lt;em&gt;self-hosting&lt;/em&gt; (i.e., the compiler can compile its own source code), and from now you start using your own tools to build the system.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Series 3: Implementing a functional RISC-V CPU step by step&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Part I: Designing a minimal instruction set that enables numeric accumulation and memory loading and storing, implement a minimal processor with digital circuit simulation software that contains the basic processor elements, such as ROM, RAM, register file, decoder, controller and ALU (arithmetic logic unit), which can execute the instruction set.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part II: Deriving an HDL language from the language, implement a digital circuit simulator and a test framework, implement a code generator from this HDL to &lt;a href=&#34;https://en.wikipedia.org/wiki/SystemVerilog&#34;&gt;SystemVerilog&lt;/a&gt;. Re-implement the previous processor with the HDL and download it to the FPGA hardware for power-on testing.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part III: Implementing a multi-cycle RV64I processor using the HDL language and download it to the FPGA hardware for power-on testing.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part IV: Implementing some common protocols (e.g. UART, (I^2C), SPI), write drivers for common peripherals (e.g. GPIO, SPI Flash, SD card, SSD 1306 display etc.). Integrating into the processor to achieve a complete hardware system.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part V: Upgrade the microarchitecture of the processor to a multi-stage pipeline design.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Series 4: Implementing a functional microkernel OS step by step&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Part I: Adding a MMU (memory management unit) to the processor, as well as a privileged module.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part II: Implementing the minimal kernel, i.e. implementing basic serial text sending and receiving, page tables, memory management, program loader, process switch and message mechanisms.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part III: Implementing the most simplified &lt;em&gt;ext4&lt;/em&gt; like file system.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part IV: Implementing a simple &lt;em&gt;Shell&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part V: Implementing a simple network interface.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part VI: Implementing a package manager.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part VII: Adding a floating point module to the processor, and a matrix algorithm coprocessor.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part VIII: implementing a simple machine learning library and then implementing a handwritten number recognition program.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part IX: Implementing a simple graphics acceleration coprocessor.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Part X: Implementing a simple graphics library, and make a retro action game.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description>
     </item>
   
 </channel>
</rss>
